list of commands in terminal executable

for help, type:
ndexcode -h
or
ndexcode -help

********************************************************************************************
********************************************************************************************

Primitive Types

31 is an example of C++ equivalent Int, or in Ndexcode, INANI or Inani
Inani can hold both positive and negative integers.
An IntArray is a InaniArray. I am not yet sure what to call an Array in Ndebele.

28.09 is an example of C++ equivalent Double, or in INOMBOLO ot Inombolo
A Inombolo literal ends with n for example 28n or has a decimal point, for example 25.09.
A Inombolo can start with the decimal point but cannot end with one, example .23 is correct and 23. is an error.

A Bool can be either "iqiniso" or "amanga"
A Bool is the C++ equivalent of Boolean and was left as Bool to maintain simplicity with the underlying C++ language.

A Byte was left as is as I cannot find an equivalent Ndebele word yet

A Amabala aka a C++ String isn't really a primitive data type, but it is very common so I'll include it here anyway. It is a series of letters, numbers or other characters of any length. You make a Amabala by surrounding text in double quotes.

#########
Operators

Mathematical operators work the same in Ndexcode as they do in any common language, together with order of operation.
The only exceptions are these:

* The assignment operator is `:` instead of `=`.
* The equality operator is `=` instead of `==`.
* There are no bitwise operators.

********************************************************************************************
********************************************************************************************

Calling functions

			bhala: "Sabona Zimbabwe"
			
is an example of a function call.

Function overloading is implemented.
bhala is an overloaded function, so you can also do `bhala: 42.1`, or even just `bhala` and it will compile (the latter takes no input and so it will just bhala an empty line).

Functions can also take input from the left.

********************************************************************************************
********************************************************************************************

Variables

A __variable__ is a place you can store a value. Every variable has a type, but types are deduced implicitly. To create, change and use a variable, simply do the following:

```
myVarName: 23
myVarName: 43
bhala: myVarName
```

`myVarName` can be any series of letters, digits and underscores, as long as it doesn't start with a number. Variable names are case sensitive.

As you can see, creating a variable, setting a variable and calling a function with all look the same. This is a very important feature for the language, as it makes refactoring variables into calculations much easier.

********************************************************************************************
********************************************************************************************

Qoqa aka Tuples

Somebody please tell me what the heck else I can name a Qoqa cause I chose Qoqa which may just be a Zulu only word.

A Qoqa can be thought of as an ad hoc data structure. To construct one you simple combine several expressions with commas. The names of the elements of a Qoqa are `a`, `b`, `c`, etc. Elements can be accesed with the `.` operator. Here is an example:

```
iqoqoLami: 6, 2.9, manga
bhala: iqoqoLami.c
bhala: iqoqoLami.a
```

The output of this will be

```
> manga
> 6
```

Qoqa elements are supposed to be mutable, but this functionality is currently broken.

********************************************************************************************
********************************************************************************************

Constants

A __constant__ is a value that is determined at compile time. Constants are created with the constants assignment operator `::`. You can declare constants above or below where you use them. Trying to set a constants more then once will result in a compile time error. Here is an example of a simple use of constants:

```
a :: 3
bhala: b
b :: a+c
c :: 2
```

This will compile correctly and print 5.

********************************************************************************************
********************************************************************************************

Comments

Comments are parts of your program that the compiler doesn't look at, so you can write notes and whatnot. In Ndexcode, single-line comments start with a `#`. Multi-line comments start with `//` and end with `\\`.

********************************************************************************************
********************************************************************************************

Explicit Type Conversion

Sometimes, you might want to send a value to a variable or function of a different type. For now, you must convert it explicitly. To do this, call the target type's name like a function. For example:

```
inomboloYami: 12.7
inomboloYami: 32       # won't work because 32 is an Int
inomboloYami: Inombolo: 32  # explicit conversion
```
